{"version":3,"sources":["assets/Screen Shot 2019-02-18 at 4.01.07 PM.png","logo.svg","assets/jake.jpg","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HomeDiv","styled","div","_templateObject","ContentDiv","_templateObject2","Button","a","_templateObject3","props","primary","css","_templateObject4","Header","h2","_templateObject5","NavigationLinks","_templateObject6","Image","button","_templateObject7","img","_templateObject8","HomePage","react_default","createElement","src","camille","href","rel","target","App","components_HomePage","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8ICAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0ECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,moDCKxC,IAAMC,EAAUC,IAAOC,IAAVC,KAePC,EAAaH,IAAOC,IAAVG,KAIVC,EAASL,IAAOM,EAAVC,IAUR,SAAAC,GAAK,OAAIA,EAAMC,SAAWC,YAAjBC,OAOPC,EAASZ,IAAOa,GAAVC,KAINC,EAAkBf,IAAOC,IAAVe,KAcfC,GALYjB,IAAOkB,OAAVC,KAKDnB,IAAOoB,IAAVC,MAyCIC,EAnCE,WACb,OACIC,EAAAjB,EAAAkB,cAACzB,EAAD,KACIwB,EAAAjB,EAAAkB,cAACrB,EAAD,KACIoB,EAAAjB,EAAAkB,cAACZ,EAAD,kBACAW,EAAAjB,EAAAkB,cAACP,EAAD,CAAOQ,IAAKC,MACZH,EAAAjB,EAAAkB,cAACT,EAAD,KAEIQ,EAAAjB,EAAAkB,cAACnB,EAAD,CAAQI,SAAO,GAAf,YACAc,EAAAjB,EAAAkB,cAACnB,EAAD,CAAQI,SAAO,GAAf,kBAEJc,EAAAjB,EAAAkB,cAAA,2CACAD,EAAAjB,EAAAkB,cAACnB,EAAD,CACIsB,KAAK,oCACLC,IAAI,WACJC,OAAO,UAHX,YAKAN,EAAAjB,EAAAkB,cAACnB,EAAD,CACIsB,KAAK,oDACLC,IAAI,WACJC,OAAO,UAHX,cAKAN,EAAAjB,EAAAkB,cAACnB,EAAD,CACIsB,KAAK,qCACLC,IAAI,WACJC,OAAO,UAHX,eC1EDC,mLANX,OACEP,EAAAjB,EAAAkB,cAACO,EAAD,aAHYC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAjB,EAAAkB,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.03efceec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2019-02-18 at 4.01.07 PM.2823fde6.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/jake.8a93be2a.jpg\";","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport jake from '../assets/jake.jpg';\nimport camille from '../assets/Screen Shot 2019-02-18 at 4.01.07 PM.png';\n\nconst HomeDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    -webkit-box-pack: center;\n    justify-content: center;\n    -webkit-box-align: center;\n    align-items: center;\n    text-align: center;\n    color: white;\n    box-shadow: rgba(0, 0, 0, 0.17) 0px 2px 20px;\n    box-sizing: border-box;\n    min-height: 100vh;\n    background: linear-gradient(20deg, rgb(219, 112, 147), rgb(218, 163, 87));\n`;\n\nconst ContentDiv = styled.div`\n    background: lightgray;\n`;\n\nconst Button = styled.a`\n  display: inline-block;\n  border-radius: 3px;\n  padding: 0.5rem 0;\n  margin: 0.5rem 1rem;\n  width: 11rem;\n  background: transparent;\n  color: white;\n  border: 2px solid white;\n  \n  ${props => props.primary && css`\n\n   background: lightgray;\n    color: salmon;\n  `}\n`;\n\nconst Header = styled.h2`\n   background: lightgray;\n`\n\nconst NavigationLinks = styled.div`\n   display: flex;\n   flex-direction: column;\n   height: 200px;\n   justify-content: center;\n   background: papayawhip;\n   align-items: center\n`;\n\nconst NavButton = styled.button`\n  margin: 0.5rem 1rem;\n  width: 11rem\n`;\n\nconst Image = styled.img`\n    \n`;\n\n// <Image src={camille}/>\n\nconst HomePage = () => {\n    return (\n        <HomeDiv>\n            <ContentDiv>\n                <Header> Hello ! </Header>\n                <Image src={camille}/>\n                <NavigationLinks>\n\n                    <Button primary> Resume </Button>\n                    <Button primary> Blog & News </Button>\n                </NavigationLinks>\n                <div> Here are links to my tings </div>\n                <Button\n                    href=\"https://github.com/andrewgough94/\"\n                    rel=\"noopener\"\n                    target=\"_blank\"\n                > Github </Button>\n                <Button\n                    href=\"https://www.linkedin.com/in/andrew-gough-9b130771\"\n                    rel=\"noopener\"\n                    target=\"_blank\"\n                > LinkedIn </Button>\n                <Button\n                    href=\"https://medium.com/@andrewgough94/\"\n                    rel=\"noopener\"\n                    target=\"_blank\"\n                > Medium </Button>\n\n\n            </ContentDiv>\n        </HomeDiv>\n    );\n};\n\n\nexport default HomePage;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomePage from './components/HomePage.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <HomePage/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}